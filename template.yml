apiVersion: v1
kind: Template
metadata:
  name: nginx
parameters:
- name: APP_NAME
  description: The name assigned to all of the application objects defined in this template.
  displayName: Application Name
  required: true
  value: report-frontend
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: nginx
  spec:
    tags:
    - name: "1.0"
      from:
        kind: DockerImage
        name: tchughesiv/openshift-nginx
    - name: latest
      from:
        kind: ImageStreamTag
        name: "1.0"
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: report-frontend
  data:
    variables.json: |-
      {
        "host": "report-backend-myproject.18.194.72.196.nip.io",
        "rest_port": 80
      }
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      name: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="${APP_NAME}"
                def project=""

                node {
                  stage("Initialize") {
                    project = env.PROJECT_NAME
                  }
                }

                node {
                  stage("Checkout") {
                    git url: "https://github.com/adessoSchweiz/${APP_NAME}", branch: "master"
                  }
                  stage("Build JSAR") {
                    def npmHome = tool 'NPM'
                    env.PATH = "${npmHome}/bin:${env.PATH}"
                    sh "STAGE=prod ./buildJSAR.sh"
                    stash name:"jsar", includes:"jsar.zip"
                  }
                }

                node {
                  stage("Build Image") {
                    unstash name:"jsar"
                    sh "oc start-build ${appName}-docker --from-file=jsar.zip -n ${project}"
                    openshiftVerifyBuild bldCfg: "${appName}-docker", namespace: project, waitTime: '20', waitUnit: 'min'
                  }
                  stage("Deploy") {
                    openshiftDeploy deploymentConfig: appName, namespace: project
                  }
                  //stage("IntegrationTest") {
                  //  def npmHome = tool 'NPM'
                  //  git url: "https://github.com/adessoSchweiz/customer-polymer-st", branch: "master"
                  //  sh "npm install"
                  //  sh "npm install nightwatch -g"
                  //  sh "${npmHome}/bin/nightwatch it"
                  //  junit allowEmptyResults: true, testResults: '**/reports/*.xml'
                  //}
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}-docker
    name: ${APP_NAME}-docker
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM nginx
        MAINTAINER Robert Brem <robert.brem@adesso.ch>
        USER root
        RUN yum install unzip -y
        ADD jsar.zip /usr/share/nginx/html
        WORKDIR /usr/share/nginx/html
        RUN rm index.html
        RUN unzip jsar.zip
        USER 997
      binary:
        asFile: jsar.zip
      type: Docker
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: nginx:latest
      type: Docker
    triggers: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: ${APP_NAME}:latest
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          volumeMounts:
          - name: environment
            mountPath: /usr/share/nginx/html/environment
          resources: {}
          terminationMessagePath: /dev/termination-log
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        volumes:
        - name: environment
          configMap:
            name: report-frontend
            items:
            - key: variables.json
              path: variables.json
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    port:
      targetPort: 8080-tcp
wildcardPolicy: None